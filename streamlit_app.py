import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import google.generativeai as genai
from io import StringIO

# Page configuration
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", page_icon="üìä", layout="wide")

# Load data with debug information
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/inuneko89/PRODUCE-DEMO-01/refs/heads/main/production_management_data.csv"
    df = pd.read_csv(url)
    
    # Debug information
    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV:", df.columns.tolist())
    st.write("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å:")
    st.write(df.head())
    
    return df

# Initialize Gemini
gemini_api_key = "AIzaSyCCQumrGPGSzDgY7_YFSSI5kFzYb-WXFB4"
genai.configure(api_key=gemini_api_key)
model = genai.GenerativeModel("gemini-pro")

# Main title
st.title("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï")

try:
    # Load data
    st.write("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    df = load_data()
    
    # Sidebar for controls
    st.sidebar.header("üéØ ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î")
    
    # Date column detection and conversion
    date_columns = df.select_dtypes(include=['datetime64']).columns.tolist()
    if not date_columns:
        # Try to identify potential date columns
        for col in df.columns:
            try:
                pd.to_datetime(df[col])
                date_columns.append(col)
            except:
                continue
    
    if date_columns:
        selected_date_column = st.sidebar.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
            date_columns
        )
        df[selected_date_column] = pd.to_datetime(df[selected_date_column])
        
        # Date range selector
        st.sidebar.subheader("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        start_date = st.sidebar.date_input(
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
            df[selected_date_column].min()
        )
        end_date = st.sidebar.date_input(
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
            df[selected_date_column].max()
        )
        
        # Filter data by date
        mask = (df[selected_date_column].dt.date >= start_date) & (df[selected_date_column].dt.date <= end_date)
        filtered_df = df.loc[mask]
    else:
        filtered_df = df
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # View options
    view_option = st.sidebar.selectbox(
        "üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á",
        ["‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
    )
    
    if view_option == "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
        # Dashboard Overview
        col1, col2, col3 = st.columns(3)
        
        numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns
        
        with col1:
            if len(numeric_columns) > 0:
                selected_metric_1 = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà 1", numeric_columns, key='metric1')
                total_value = filtered_df[selected_metric_1].sum()
                st.metric("üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° " + selected_metric_1, f"{total_value:,.0f}")
        
        with col2:
            if len(numeric_columns) > 1:
                selected_metric_2 = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà 2", numeric_columns, key='metric2')
                avg_value = filtered_df[selected_metric_2].mean()
                st.metric("üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ " + selected_metric_2, f"{avg_value:.2f}")
        
        with col3:
            if len(numeric_columns) > 2:
                selected_metric_3 = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà 3", numeric_columns, key='metric3')
                max_value = filtered_df[selected_metric_3].max()
                st.metric("üîù ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î " + selected_metric_3, f"{max_value:.2f}")
        
        # Recommended Analysis
        st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        
        # Time Series Analysis (if date column exists)
        if date_columns:
            selected_metric = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°", numeric_columns)
            fig_trend = px.line(filtered_df, 
                              x=selected_date_column, 
                              y=selected_metric,
                              title=f'‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° {selected_metric} ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤')
            st.plotly_chart(fig_trend, use_container_width=True)
        
        # Distribution Analysis
        col1, col2 = st.columns(2)
        
        with col1:
            selected_metric_dist = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß", numeric_columns)
            fig_dist = px.histogram(filtered_df, 
                                  x=selected_metric_dist,
                                  title=f'‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á {selected_metric_dist}')
            st.plotly_chart(fig_dist, use_container_width=True)
        
        with col2:
            selected_metrics = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", 
                                            numeric_columns,
                                            default=list(numeric_columns)[:2] if len(numeric_columns) >= 2 else [])
            if len(selected_metrics) >= 2:
                fig_scatter = px.scatter(filtered_df,
                                       x=selected_metrics[0],
                                       y=selected_metrics[1],
                                       title=f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {selected_metrics[0]} ‡πÅ‡∏•‡∏∞ {selected_metrics[1]}')
                st.plotly_chart(fig_scatter, use_container_width=True)
        
    elif view_option == "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
        st.subheader("üìã ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # Column selection
        selected_columns = st.multiselect(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á",
            filtered_df.columns.tolist(),
            default=filtered_df.columns.tolist()[:5]
        )
        
        # Number of rows to display
        n_rows = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á", 5, 50, 10)
        
        # Display selected data
        st.dataframe(filtered_df[selected_columns].head(n_rows))
        
        # Basic statistics
        if st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"):
            st.write(filtered_df[selected_columns].describe())
            
    elif view_option == "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü":
        st.subheader("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
        
        # Graph type selection
        graph_type = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü",
            ["‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô", "‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á", "‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢", "‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πà‡∏≠‡∏á", "‡∏Æ‡∏¥‡∏™‡πÇ‡∏ï‡πÅ‡∏Å‡∏£‡∏°"]
        )
        
        # Column selection for X and Y axis
        x_column = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô X", filtered_df.columns.tolist())
        y_column = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô Y", filtered_df.columns.tolist())
        
        # Optional color grouping
        color_column = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏µ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)",
            ["‡πÑ‡∏°‡πà‡∏°‡∏µ"] + filtered_df.columns.tolist()
        )
        
        # Create graph based on selection
        if graph_type == "‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô":
            fig = px.line(filtered_df, x=x_column, y=y_column, 
                         color=None if color_column == "‡πÑ‡∏°‡πà‡∏°‡∏µ" else color_column,
                         title=f"{y_column} vs {x_column}")
            
        elif graph_type == "‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á":
            fig = px.bar(filtered_df, x=x_column, y=y_column,
                        color=None if color_column == "‡πÑ‡∏°‡πà‡∏°‡∏µ" else color_column,
                        title=f"{y_column} by {x_column}")
            
        elif graph_type == "‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢":
            fig = px.scatter(filtered_df, x=x_column, y=y_column,
                           color=None if color_column == "‡πÑ‡∏°‡πà‡∏°‡∏µ" else color_column,
                           title=f"{y_column} vs {x_column}")
            
        elif graph_type == "‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πà‡∏≠‡∏á":
            fig = px.box(filtered_df, x=x_column, y=y_column,
                        color=None if color_column == "‡πÑ‡∏°‡πà‡∏°‡∏µ" else color_column,
                        title=f"Box Plot of {y_column} by {x_column}")
            
        elif graph_type == "‡∏Æ‡∏¥‡∏™‡πÇ‡∏ï‡πÅ‡∏Å‡∏£‡∏°":
            fig = px.histogram(filtered_df, x=x_column,
                             color=None if color_column == "‡πÑ‡∏°‡πà‡∏°‡∏µ" else color_column,
                             title=f"Histogram of {x_column}")
        
        st.plotly_chart(fig, use_container_width=True)
        
    else:  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.subheader("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # Text area for custom query
        query = st.text_area(
            "‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:",
            "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£? ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?"
        )
        
        if st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
            try:
                # Create context for AI
                data_summary = filtered_df.describe().to_string()
                prompt = f"""
                ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
                {data_summary}
                
                ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {query}
                
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
                """
                
                response = model.generate_content(prompt)
                st.write("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
                st.write(response.text)
                
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    # Download option
    if st.sidebar.button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV"):
        csv = filtered_df.to_csv(index=False)
        st.sidebar.download_button(
            label="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
            data=csv,
            file_name="production_data.csv",
            mime="text/csv"
        )

except Exception as e:
    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
    st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")